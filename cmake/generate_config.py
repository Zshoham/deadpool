import os
import re
import sys
import argparse

# Regex to find lines like: #define MYCONF 1
CONFIG_REGEX = re.compile(r"^#define\s+((\w+))\s+([01])")

def generate_header(config_header, generated_header):
    """Parses the input header and generates an output header with helper macros."""


    generated_lines = [
        "#pragma once\n\n",
        "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.\n",
        "// YOU SHOULD REGENERATE THIS FILE ONLY WHEN ADDING OR REMOVING\n",
        "// CONFIGURATION OPTIONS, THERE IS NO NEED TO REGENERATE WHEN CHANGING THEM.\n"
        f"#include <{os.path.basename(config_header)}>\n\n",
    ]

    try:
        with open(config_header, 'r') as f:
            for line in f:
                match = CONFIG_REGEX.match(line)
                if not match:
                    continue

                conf_name = match.group(1)    # e.g., MYCONF

                generated_lines.append(f"#if {conf_name}\n")
                generated_lines.append(f"#define {conf_name}_ENABLED 1\n")
                generated_lines.append(f"#define IF_{conf_name}(...) __VA_ARGS__\n")
                generated_lines.append(f"#define IF_NOT_{conf_name}(...) /* {conf_name} Enabled */\n")
                generated_lines.append("#else\n")
                generated_lines.append(f"#define {conf_name}_DISABLED 1\n")
                generated_lines.append(f"#define IF_{conf_name}(...) /* {conf_name} Disabled */\n")
                generated_lines.append(f"#define IF_NOT_{conf_name}(...) __VA_ARGS__\n")
                generated_lines.append("#endif\n\n")

    except FileNotFoundError:
        print(f"Error: Input file '{config_header}' not found.")
        sys.exit(1)

    with open(generated_header, 'w') as f:
        f.writelines(generated_lines)

    print(f"Successfully generated '{generated_header}' from '{config_header}'.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("config_header")
    parser.add_argument("generated_header")
    args = parser.parse_args()
    generate_header(args.config_header, args.generated_header)
